[{"/Users/shashankchandel/Documents/PersonalizedTodo/src/index.js":"1","/Users/shashankchandel/Documents/PersonalizedTodo/src/component/App.js":"2","/Users/shashankchandel/Documents/PersonalizedTodo/src/component/Todo.js":"3","/Users/shashankchandel/Documents/PersonalizedTodo/src/component/display.js":"4","/Users/shashankchandel/Documents/PersonalizedTodo/src/component/Display.js":"5"},{"size":229,"mtime":1607871953700,"results":"6","hashOfConfig":"7"},{"size":3101,"mtime":1607875200151,"results":"8","hashOfConfig":"7"},{"size":1636,"mtime":1607875453021,"results":"9","hashOfConfig":"7"},{"size":931,"mtime":1607798961264,"results":"10","hashOfConfig":"7"},{"size":951,"mtime":1607875231278,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"1tnlbpl",{"filePath":"15","messages":"16","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"17","usedDeprecatedRules":"14"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"/Users/shashankchandel/Documents/PersonalizedTodo/src/index.js",[],["25","26"],"/Users/shashankchandel/Documents/PersonalizedTodo/src/component/App.js",["27"],"import React, { useState, useEffect } from 'react';\nimport Todo from './Todo';\n\nfunction App() {\n  //states\n  const [task, setTask] = useState('');\n  const [taskList, settaskList] = useState([]);\n  const [status, setStatus] = useState('');\n  const [filter, setFilter] = useState('filter');\n  const [filterList, setFilterList] = useState([]);\n\n  //on filter or task add/remove\n  useEffect(() => {\n    onFilterChange();\n  }, [taskList, filter]);\n\n  // fetch once from localStorage\n  useEffect(() => {\n    if (localStorage.getItem('taskList') === null) {\n      localStorage.setItem('taskList', JSON.stringify([]));\n    } else {\n      settaskList(JSON.parse(localStorage.getItem('taskList')));\n    }\n  }, []);\n\n  // display time..\n  let time = new Date().toLocaleTimeString();\n  const [currentTime, setCurrentTime] = useState(time);\n  const updateTime = () => {\n    time = new Date().toLocaleTimeString();\n    setCurrentTime(time);\n  };\n  setInterval(updateTime, 1000);\n\n  // to display filtered list on selection\n  const handleChange = (event) => {\n    setFilter(event.target.value);\n  };\n\n  //update local storage & display notifications on list change\n  useEffect(() => {\n    if (localStorage.getItem('taskList') === null) {\n      localStorage.setItem('taskList', JSON.stringify([]));\n    } else {\n      localStorage.setItem('taskList', JSON.stringify(taskList));\n    }\n    setTimeout(() => setStatus(''), 3000);\n  }, [taskList]);\n\n  //set task on input change\n  const onTaskChange = (e) => {\n    setTask({ text: e.target.value, done: false, id: Math.random() * 100 });\n  };\n\n  //add task to list and set notify message(status) && localStorage update\n  const addTask = () => {\n    settaskList((prevTasks) => {\n      return [...prevTasks, task];\n    });\n    localStorage.setItem('taskList', JSON.stringify(taskList));\n    setTask('');\n    setStatus('Task Added !');\n  };\n\n  //remove task\n  const removeTask = (id) => {\n    const updateTaskList = taskList.filter((task) => task.id !== id);\n    settaskList(updateTaskList);\n    setStatus('Task Removed !');\n  };\n\n  //cross task completed and set notify message.\n  const completeTask = (id) => {\n    settaskList(\n      taskList.map((task) => {\n        if (task.id === id) {\n          return { ...task, done: !task.done };\n        }\n        return task;\n      })\n    );\n    setStatus('Task Status updated !');\n  };\n\n  //update filtered list on status\n  const onFilterChange = () => {\n    if (filter === 'Done') {\n      setFilterList(taskList.filter((task) => task.done === true));\n    } else if (filter === 'Not-Done') {\n      setFilterList(taskList.filter((task) => task.done === false));\n    } else {\n      setFilterList(taskList);\n    }\n  };\n\n  return (\n    <div className='App'>\n      <h1 className='clock'>{currentTime}</h1>\n\n      <Todo\n        task={task}\n        onTaskChange={onTaskChange}\n        addTask={addTask}\n        removeTask={removeTask}\n        completeTask={completeTask}\n        status={status}\n        filter={filter}\n        filterList={filterList}\n        handleChange={handleChange}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","/Users/shashankchandel/Documents/PersonalizedTodo/src/component/Todo.js",[],"/Users/shashankchandel/Documents/PersonalizedTodo/src/component/display.js",[],"/Users/shashankchandel/Documents/PersonalizedTodo/src/component/Display.js",[],["28","29"],{"ruleId":"30","replacedBy":"31"},{"ruleId":"32","replacedBy":"33"},{"ruleId":"34","severity":1,"message":"35","line":15,"column":6,"nodeType":"36","endLine":15,"endColumn":24,"suggestions":"37"},{"ruleId":"30","replacedBy":"38"},{"ruleId":"32","replacedBy":"39"},"no-native-reassign",["40"],"no-negated-in-lhs",["41"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'onFilterChange'. Either include it or remove the dependency array.","ArrayExpression",["42"],["40"],["41"],"no-global-assign","no-unsafe-negation",{"desc":"43","fix":"44"},"Update the dependencies array to be: [taskList, filter, onFilterChange]",{"range":"45","text":"46"},[423,441],"[taskList, filter, onFilterChange]"]